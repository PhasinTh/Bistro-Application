version: "3.9"

x-kong-config: &kong-env
  KONG_DATABASE: ${KONG_DATABASE:-postgres}
  KONG_PG_DATABASE: ${KONG_PG_DATABASE:-kong}
  KONG_PG_HOST: kong-db
  KONG_PG_USER: ${KONG_PG_USER:-kong}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD:-kong}

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs
  kong_tmp_vol:
    driver_opts:
     type: tmpfs
     device: tmpfs

networks:
  kong-net:
    external: false
  app-net:
    external: false
  member-net:
    external: false

services:
  kong-db:
    image: postgres:9.6
    environment:
      POSTGRES_DB: ${KONG_PG_DATABASE:-kong}
      POSTGRES_USER: ${KONG_PG_USER:-kong}
      POSTGRES_PASSWORD: ${KONG_PG_PASSWORD:-kong}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - kong-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  kong-migrations:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations bootstrap
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - kong-db
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/config/kong.yaml"
    networks:
      - kong-net
    depends_on:
      - kong-db
    ports:
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:8000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:8443:8443/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "127.0.0.1:8444:8444/tcp"
      - "8002:8002"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure:5
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./api-gateway/config:/opt/kong/config
      - ./api-gateway/protobuf:/opt/kong/protobuf
    security_opt:
      - no-new-privileges

  konga-prepare:
    image: pantsel/konga:next
    command: "-c prepare -a postgres -u postgresql://${KONG_PG_USER:-kong}:${KONG_PG_PASSWORD:-kong}@kong-db:5432/konga_db"
    networks:
      - kong-net
    restart: on-failure
    links:
      - kong-db
    depends_on:
      - kong-db
  
  konga:
    image: pantsel/konga:next
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_URI: "postgresql://${KONG_PG_USER:-kong}:${KONG_PG_PASSWORD:-kong}@kong-db:5432/konga_db"
      NODE_ENV: production
    links:
      - kong-db
    networks:
      - kong-net
    depends_on:
      - kong-db
    ports:
      - "127.0.0.1:1337:1337/tcp"

  app-db:
    image: postgres
    environment:
      POSTGRES_DB: ${APP_PG_DATABASE:-application_db}
      POSTGRES_USER: ${APP_PG_USER:-postgres}
      POSTGRES_PASSWORD: ${APP_PG_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${APP_PG_USER:-postgres}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - app-net

  bistro-svc:
    build: bistro-svc
    restart: always
    environment:
      DB_DRIVER: 'postgres'
      DB_HOST: app-db
      DB_DATABASE: ${APP_PG_DATABASE:-application_db}
      DB_USER: ${APP_PG_USER:-postgres}
      DB_PASSWORD: ${APP_PG_PASSWORD:-postgres}
      DB_PORT: '5432'
      NODE_ENV: 'development'
    depends_on:
      - app-db
    networks:
      - kong-net
      - app-net

  menu-svc:
    build: menu-svc
    restart: always
    environment:
      DB_DRIVER: 'postgres'
      DB_HOST: app-db
      DB_DATABASE: ${APP_PG_DATABASE:-application_db}
      DB_USER: ${APP_PG_USER:-postgres}
      DB_PASSWORD: ${APP_PG_PASSWORD:-postgres}
      DB_PORT: '5432'
      NODE_ENV: 'development'
    depends_on:
      - app-db
    networks:
      - kong-net
      - app-net

  qrcode-svc:
    build: qrcode-svc
    restart: always
    environment:
      DB_DRIVER: 'postgres'
      DB_HOST: app-db
      DB_DATABASE: ${APP_PG_DATABASE:-application_db}
      DB_USER: ${APP_PG_USER:-postgres}
      DB_PASSWORD: ${APP_PG_PASSWORD:-postgres}
      DB_PORT: '5432'
      NODE_ENV: 'development'
    depends_on:
      - app-db
    networks:
      - kong-net
      - app-net

  order-svc:
    build: order-svc
    restart: always
    environment:
      DB_DRIVER: 'postgres'
      DB_HOST: app-db
      DB_DATABASE: ${APP_PG_DATABASE:-application_db}
      DB_USER: ${APP_PG_USER:-postgres}
      DB_PASSWORD: ${APP_PG_PASSWORD:-postgres}
      DB_PORT: '5432'
      NODE_ENV: 'development'
    depends_on:
      - app-db
    networks:
      - kong-net
      - app-net
  
  member-db:
    image: postgres
    environment:
      POSTGRES_DB: ${APP_PG_DATABASE:-member_db}
      POSTGRES_USER: ${APP_PG_USER:-postgres}
      POSTGRES_PASSWORD: ${APP_PG_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${APP_PG_USER:-postgres}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    networks:
      - member-net

  member-svc:
    build: member-svc
    restart: always
    environment:
      DB_DRIVER: 'postgres'
      DB_HOST: member-db
      DB_DATABASE: ${APP_PG_DATABASE:-member_db}
      DB_USER: ${APP_PG_USER:-postgres}
      DB_PASSWORD: ${APP_PG_PASSWORD:-postgres}
      DB_PORT: '5432'
      NODE_ENV: 'development'
    depends_on:
      - member-db
    networks:
      - kong-net
      - app-net
      - member-net